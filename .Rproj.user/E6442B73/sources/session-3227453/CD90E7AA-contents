---
title: "Impact of the COVID-19 pandemic on other infectious diseases in the EU/EEA, 2012-2021 "
author: "Lydia"
date: "`r format(Sys.time(), '%A %d %B %Y')`"
output: 
  bookdown::html_document2:
    number_sections: FALSE
    toc: true
    toc_float: TRUE
    toc_depth: 3
    fig_width: 7
    fig_height: 5
    anchor_sections: FALSE
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      collapse = TRUE,
                      fig.width = 6,
                      fig.height = 4,
                      dpi = 150,
                      warning = FALSE,
                      message = FALSE)
```


```{r chunck set, echo=FALSE, warning = FALSE}

# Set default options chuncks
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)

# Setting how to display NA is tables
#options(knitr.kable.NA = '')

```

```{r source files, include=FALSE}
source(here::here("code/01_SetUp.R"))
source(here::here("code/02_DataPreparation.R"))
source(here::here("code/03b_TimeSeriesPlot.R"))
source(here::here("code/05b_ForecastPlot_overall.R"))
```


```{r create all the plots per country and per disease, include=FALSE}

# Create an empty list to store the plots
plot_list <- list()

for (j_country in unique(data$RegionName)) {
  data_country <- data %>%
    filter(RegionName == j_country)
  
  for (i_disease in unique(data_country$disease_name)) {
    data_country_disease <- data_country %>%
      filter(disease_name == i_disease)
    
    # Create the plot
    plot_i <- ggplot(data = data_country_disease, aes(x = year, y = cases)) +
      geom_line(col = "#E8683F") +
      xlab("Year") +
      ggtitle(paste(i_disease)) +
      scale_x_continuous(breaks = unique(data$year)) +
      ecdctheme() +
      scale_y_continuous(
        name = "Number of notifications",
        labels = function(y) format(y, big.mark = ",", scientific = FALSE),
        expand = c(0, 0),
        limits = c(0, max(data_country_disease$cases))
      ) +
      theme(
        axis.text.x = element_text(size = 9, color = "black"),
        axis.text.y = element_text(size = 9, color = "black")
      )
    
    # Store the plot in the list
    plot_list[[paste(j_country, i_disease)]] <- plot_i
  }
}
```

```{r create all the plots per group overall, include=FALSE}
plot_list_country_overall <- plot_time_series(data,"RegionName")
plot_list_mode_overall <- plot_time_series(data, "TransmissionMode")
plot_list_resp_overall <- plot_time_series(data, "Respiratory")
```



```{r plot Number of Cases per Disease per Reporting Country, results='asis'}

cat("## Notifications of reported cases by country \n\n")

for (j_country in unique(data$RegionName)) {
  cat("###", j_country, "{.tabset .tabset-pills} \n\n")
  
  cat("#### Time Series {.tabset .tabset-pills} \n\n")
  
  print(plot_list_country_overall[[j_country]])
  cat("\n\n")
  
  
  for (i_disease in unique(data$disease_name)) {
    cat("#####", paste(i_disease), "\n\n")
    
    # Check if the combination exists in plot_list
    combination <- paste(j_country, i_disease)
    if (combination %in% names(plot_list)) {
      print(plot_list[[combination]])
      cat("\n\n")
    } else {
      cat(paste(j_country, "hasn't reported cases for", i_disease, "\n\n"))
    }
  }
  
  cat("#### Forecast \n\n")
  
  data_group <- subset(data, data$RegionName == j_country)
  
  print(plot_forecasts(data_group))
  cat("\n\n")
  
  cat("#### Table \n\n")
}

```


```{r plot Number of Cases per Transmission Mode, results='asis'}

cat("## Notifications of reported cases by transmission mode \n\n")

for (j_mode in unique(data$TransmissionMode)) {
  cat("###", j_mode, "{.tabset .tabset-pills} \n\n")
  
  cat("#### Time Series {.tabset .tabset-pills} \n\n")
  
  print(plot_list_mode_overall[[j_mode]])
  cat("\n\n")
  
  data_group <- subset(data, data$TransmissionMode == j_mode)
  plot_list_disease_overall <- plot_time_series(data,"Disease")
  
  for (i_disease in unique(data_group$disease_name)) {
    cat("#####", paste(i_disease), "\n\n")
    
    print(plot_list_disease_overall[[i_disease]])
    cat("\n\n")
    
  }
  
  cat("#### Forecast \n\n")
  
  print(plot_forecasts(data_group))
  cat("\n\n")
  
  cat("#### Table \n\n")
}

```
