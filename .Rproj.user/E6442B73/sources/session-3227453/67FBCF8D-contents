### ---
### Project: Analysis of STI TESSy surveillance data
### ---
### Date: 
###   November 2018 - January 2019
###
### Author: 
###   Lore Merdrignac (Epiconcept)
### Adapted from: 
###   Gianfranco Spiteri (ECDC)
### Modified by:
###    Lore Merdrignac within SC14 contract March 2019 - January 2020
###    Lore Merdrignac within SC22 contract April 2022 - April 2023
###

### Computation of the 'trend' indicator:
###   Create figure with trend overall and by gender for previous ten years



# Cleaning all objects from previous indicators computation -------------

rm(list = ls())


# Config ----------------------------------------------------------------

source("./config.R", echo = TRUE)


# Indicator -------------------------------------------------------------

indicator <- 'trend'


# Diseases for which to run the indicator -------------------------------

#diseases <- DISEASE_INDICATOR$disease[DISEASE_INDICATOR[, indicator] == 1]
diseases <- "GONO" 

# Run the indicator for each disease ------------------------------------

###!!!!!!!Note: for GONO WB countries not removed! Script not adapted as it is not used for any outputs!!!!!!!

for (i in diseases) {
  
  ## Data preparation ---------------------------------------------------
  
  # --- Load data extraction 'rawData'
  load(paste("data/", i, "_gender_data.RData", sep = ""))
  
  
  # Keep only last ten years and non-sentinel (see. parameter TREND)
  cases_temp <- subset(cases_temp, 
                       Year > (YEAR - TREND) & Year <= YEAR & isSentinel != 1)
  
  # List countries
  countries <- unique(cases_temp$CountryName)
  
  
  # Ordering by CountryName, Year, Gender
  cases_temp <- cases_temp[with(cases_temp, order(CountryName, Year, Gender)), ]
  
  
  # For each country check that ten years of data exist
  for (j in countries) {
    print(j)
    print("Years of data: ")
    n_years <- (length(unique(
      subset(cases_temp$Year,
             cases_temp$CountryName == j &
               cases_temp$Gender != "UNK" & !is.na(cases_temp$Cases))
    )))
    print(n_years)
    cases_temp_excl <- cases_temp[!(cases_temp$CountryName == j), ]
    if (n_years == TREND) {
      cases_temp <- cases_temp
    } else {
      cases_temp <- cases_temp_excl
    }
  }
  
  # Reconstruct total number of cases by country
  cases_totals <- aggregate(list(Cases = cases_temp$Cases),
                            by = list(ReportingCountry = cases_temp$ReportingCountry,
                                      CountryName = cases_temp$CountryName,
                                      Year = cases_temp$Year),
                            FUN = sum,
                            na.rm = TRUE)
  
  # Drop unknown Gender
  cases_temp <- cases_temp[!(cases_temp$Gender == "UNK"), ]
  
  # Merge population with total
  # Load populations 'pop' and merge with sentinel data
  load("./data/population_extraction/overall_pop_dataset.Rda")
  
  cases_totals <- merge(cases_totals, pop, by = c("ReportingCountry", "Year"))
  cases_totals$Gender <- "T"
  
  # Merge population with gender data
  # Load populations 'pop_gender' and merge with sentinel data
  load("./data/population_extraction/overall_pop_gender_dataset.Rda")
  
  cases_temp <- merge(cases_temp,
                      pop_gender,
                      by = c("ReportingCountry", "Year", "Gender"))
  
  # Append totals to gender data
  cases_combined <- rbind.fill(cases_temp, cases_totals)
  
  # Keep only necessary variables
  cases_combined <- subset(cases_combined,
                           select = c("Year", "Gender", "CountryName", "Cases", "Population"))
  
  # Create EU/EEA totals
  cases_combined_EUEEA <- aggregate(list(Cases = cases_combined$Cases, 
                                         Population = cases_combined$Population),
                                    by = list(Year = cases_combined$Year, 
                                              Gender = cases_combined$Gender),
                                    FUN = sum,
                                    na.rm = TRUE)
  
  # Calculate rates
  cases_combined_EUEEA$Rate <-
    cases_combined_EUEEA$Cases / cases_combined_EUEEA$Population * 100000
  
  # Labels
  cases_combined_EUEEA$Gender <- factor(cases_combined_EUEEA$Gender, 
                                        levels=c("F", "T", "M"), 
                                        labels=c("Women", "Total", "Men"))
  cases_combined_EUEEA$Gender <- factor(cases_combined_EUEEA$Gender, 
                                        levels = rev(levels(cases_combined_EUEEA$Gender))) 
                                          # reorders legend items
  
  # Breaks
  MAX <- max(cases_combined_EUEEA$Rate, na.rm = TRUE)
  TICKS <- ifelse(MAX < 20, 5,
                  ifelse(MAX < 50, 10, 50))
  MAX <- ceiling(MAX/(TICKS*2))*TICKS*2
  
  # Legend postion
  if(i == "SYPH") {
    POS <- c(.9 , .9) 
  } else {
    POS <- c(0.9, .8)
  }
  
  # Plot
  ggplot(cases_combined_EUEEA, aes(x = Year,
                                   y = Rate,
                                   group = Gender,
                                   color = Gender)) + 
    geom_line(linetype = 1, linewidth = 1) +
    scale_y_continuous(breaks = seq(0, MAX, TICKS), 
                       limits = c(0, MAX),
                       expand = c(0,0)) + 
    scale_color_manual(values = c(GREENDouble1, "Black", GREENDouble2)) +
    labs(y = "Number of cases per 100 000 population") +
    theme_bw() +
    theme(
      legend.position = POS,
      legend.title=element_blank(),
      axis.line = element_line(colour = "black"),
      panel.background = element_blank(),
      panel.border = element_blank(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      axis.title = element_text(
        color = "Black",
        face = "bold",
        size = 10
      )
    )
  
  ggsave(paste("plots/", i, "_", YEAR, "_trend_gender.png", sep = ""), 
         width = 6,
         height = 6,
         dpi = 600)
  
  
  # Plot for the AER
  toPlotAER <- cases_combined_EUEEA %>% 
    mutate(Date = as.Date(paste(Year, "01", "01", sep = "-")),
           Gender = factor(Gender, 
                           levels = c("Total", "Men", "Women"),
                           labels = c("Total", "Male", "Female")))
  
  EpiReport::plotTSGrouped(toPlotAER,
                           xvar = "Date",
                           xlabel = "Year",
                           yvar = "Rate",
                           ylabel = "Number of cases per 100 000 population",
                           group = "Gender",
                           xvar_format = "%Y")
  
  ggsave(paste("plots/", i, "_", YEAR, "_trend_gender_AER.png", sep = ""), 
         width = 6,
         height = 3,
         dpi = 600)
  
}


# End indicator_trend.R ---------------------------------------------------


